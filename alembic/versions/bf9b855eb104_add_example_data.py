
"""Add example data

Revision ID: bf9b855eb104
Revises: 
Create Date: 2025-09-30 21:18:36.336866

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from datetime import date, datetime

from app.core.security import get_password_hash
from app.models.enums import RoleEnum, ServiceOrderStatusEnum


# revision identifiers, used by Alembic.
revision: str = 'bf9b855eb104'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('address',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('street', sa.String(), nullable=False),
    sa.Column('number', sa.String(), nullable=False),
    sa.Column('complement', sa.String(), nullable=True),
    sa.Column('neighborhood', sa.String(), nullable=False),
    sa.Column('city', sa.String(), nullable=False),
    sa.Column('state', sa.String(), nullable=False),
    sa.Column('cep', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_address_id'), 'address', ['id'], unique=False)
    op.create_table('document',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('file_path', sa.String(), nullable=False),
    sa.Column('file_type', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_document_id'), 'document', ['id'], unique=False)
    op.create_table('person',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('cpf', sa.String(), nullable=True),
    sa.Column('birth', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_person_cpf'), 'person', ['cpf'], unique=True)
    op.create_index(op.f('ix_person_id'), 'person', ['id'], unique=False)
    op.create_table('service_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_service_type_id'), 'service_type', ['id'], unique=False)
    op.create_table('client',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('cnpj', sa.String(), nullable=True),
    sa.Column('address_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['address_id'], ['address.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_client_cnpj'), 'client', ['cnpj'], unique=True)
    op.create_index(op.f('ix_client_email'), 'client', ['email'], unique=True)
    op.create_index(op.f('ix_client_id'), 'client', ['id'], unique=False)
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('person_id', sa.Integer(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'USER', name='roleenum'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['person_id'], ['person.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('person_id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_table('contract',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('number', sa.String(), nullable=False),
    sa.Column('date_start', sa.Date(), nullable=False),
    sa.Column('date_end', sa.Date(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_contract_id'), 'contract', ['id'], unique=False)
    op.create_index(op.f('ix_contract_number'), 'contract', ['number'], unique=True)
    op.create_table('user_config',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('theme', sa.String(), nullable=True),
    sa.Column('notifications_enabled', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_user_config_id'), 'user_config', ['id'], unique=False)
    op.create_table('contract_document',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('contract_id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['contract_id'], ['contract.id'], ),
    sa.ForeignKeyConstraint(['document_id'], ['document.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_contract_document_id'), 'contract_document', ['id'], unique=False)
    op.create_table('service_order',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('service_type_id', sa.Integer(), nullable=False),
    sa.Column('contract_id', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'IN_PROGRESS', 'FINISHED', 'CANCELED', name='serviceorderstatusenum'), nullable=False),
    sa.Column('total_value', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], ),
    sa.ForeignKeyConstraint(['contract_id'], ['contract.id'], ),
    sa.ForeignKeyConstraint(['service_type_id'], ['service_type.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_service_order_id'), 'service_order', ['id'], unique=False)
    op.create_table('service_order_document',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('service_order_id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['document.id'], ),
    sa.ForeignKeyConstraint(['service_order_id'], ['service_order.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_service_order_document_id'), 'service_order_document', ['id'], unique=False)
    op.create_table('service_order_item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('service_order_id', sa.Integer(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_value', sa.Float(), nullable=False),
    sa.Column('total_value', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['service_order_id'], ['service_order.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_service_order_item_id'), 'service_order_item', ['id'], unique=False)
    # ### end Alembic commands ###

    # Add example data
    op.bulk_insert(
        sa.Table(
            'person', sa.MetaData(),
            sa.Column('id', sa.Integer, primary_key=True),
            sa.Column('name', sa.String),
            sa.Column('phone', sa.String),
            sa.Column('cpf', sa.String),
            sa.Column('birth', sa.String),
            sa.Column('created_at', sa.DateTime),
            sa.Column('updated_at', sa.DateTime),
        ),
        [
            {"id": 1, "name": "Admin User", "phone": "11999999999", "cpf": "11122233344", "birth": "1980-01-01", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": 2, "name": "Regular User", "phone": "11888888888", "cpf": "55566677788", "birth": "1990-05-15", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": 3, "name": "Client Person", "phone": "11777777777", "cpf": "99988877766", "birth": "1975-11-20", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
        ]
    )

    op.bulk_insert(
        sa.Table(
            'user', sa.MetaData(),
            sa.Column('id', sa.Integer, primary_key=True),
            sa.Column('email', sa.String),
            sa.Column('hashed_password', sa.String),
            sa.Column('person_id', sa.Integer),
            sa.Column('active', sa.Boolean),
            sa.Column('role', sa.Enum(RoleEnum)),
            sa.Column('created_at', sa.DateTime),
            sa.Column('updated_at', sa.DateTime),
        ),
        [
            {"id": 1, "email": "admin@example.com", "hashed_password": get_password_hash("adminpass"), "person_id": 1, "active": True, "role": RoleEnum.ADMIN, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": 2, "email": "user@example.com", "hashed_password": get_password_hash("userpass"), "person_id": 2, "active": True, "role": RoleEnum.USER, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
        ]
    )

    op.bulk_insert(
        sa.Table(
            'user_config', sa.MetaData(),
            sa.Column('id', sa.Integer, primary_key=True),
            sa.Column('user_id', sa.Integer),
            sa.Column('theme', sa.String),
            sa.Column('notifications_enabled', sa.Boolean),
            sa.Column('created_at', sa.DateTime),
            sa.Column('updated_at', sa.DateTime),
        ),
        [
            {"id": 1, "user_id": 1, "theme": "dark", "notifications_enabled": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": 2, "user_id": 2, "theme": "light", "notifications_enabled": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
        ]
    )

    op.bulk_insert(
        sa.Table(
            'address', sa.MetaData(),
            sa.Column('id', sa.Integer, primary_key=True),
            sa.Column('street', sa.String),
            sa.Column('number', sa.String),
            sa.Column('complement', sa.String),
            sa.Column('neighborhood', sa.String),
            sa.Column('city', sa.String),
            sa.Column('state', sa.String),
            sa.Column('cep', sa.String),
            sa.Column('created_at', sa.DateTime),
            sa.Column('updated_at', sa.DateTime),
        ),
        [
            {"id": 1, "street": "Rua Principal", "number": "123", "complement": "Apto 101", "neighborhood": "Centro", "city": "São Paulo", "state": "SP", "cep": "01000-000", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": 2, "street": "Avenida Secundária", "number": "456", "complement": None, "neighborhood": "Bairro Novo", "city": "Rio de Janeiro", "state": "RJ", "cep": "20000-000", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
        ]
    )

    op.bulk_insert(
        sa.Table(
            'client', sa.MetaData(),
            sa.Column('id', sa.Integer, primary_key=True),
            sa.Column('name', sa.String),
            sa.Column('email', sa.String),
            sa.Column('phone', sa.String),
            sa.Column('cnpj', sa.String),
            sa.Column('address_id', sa.Integer),
            sa.Column('created_at', sa.DateTime),
            sa.Column('updated_at', sa.DateTime),
        ),
        [
            {"id": 1, "name": "Empresa Teste Ltda", "email": "contato@empresa.com", "phone": "1133334444", "cnpj": "11222333000144", "address_id": 1, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
        ]
    )

    op.bulk_insert(
        sa.Table(
            'service_type', sa.MetaData(),
            sa.Column('id', sa.Integer, primary_key=True),
            sa.Column('name', sa.String),
            sa.Column('description', sa.String),
            sa.Column('created_at', sa.DateTime),
            sa.Column('updated_at', sa.DateTime),
        ),
        [
            {"id": 1, "name": "Instalação", "description": "Instalação de equipamentos", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": 2, "name": "Manutenção", "description": "Manutenção preventiva e corretiva", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
        ]
    )

    op.bulk_insert(
        sa.Table(
            'contract', sa.MetaData(),
            sa.Column('id', sa.Integer, primary_key=True),
            sa.Column('client_id', sa.Integer),
            sa.Column('number', sa.String),
            sa.Column('date_start', sa.Date),
            sa.Column('date_end', sa.Date),
            sa.Column('value', sa.Float),
            sa.Column('created_at', sa.DateTime),
            sa.Column('updated_at', sa.DateTime),
        ),
        [
            {"id": 1, "client_id": 1, "number": "CONTRATO-001", "date_start": date(2023, 1, 1), "date_end": date(2023, 12, 31), "value": 10000.00, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
        ]
    )

    op.bulk_insert(
        sa.Table(
            'document', sa.MetaData(),
            sa.Column('id', sa.Integer, primary_key=True),
            sa.Column('filename', sa.String),
            sa.Column('file_path', sa.String),
            sa.Column('file_type', sa.String),
            sa.Column('created_at', sa.DateTime),
            sa.Column('updated_at', sa.DateTime),
        ),
        [
            {"id": 1, "filename": "contrato_001.pdf", "file_path": "/app/files/contrato_001.pdf", "file_type": "application/pdf", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": 2, "filename": "laudo_tecnico.docx", "file_path": "/app/files/laudo_tecnico.docx", "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
        ]
    )

    op.bulk_insert(
        sa.Table(
            'contract_document', sa.MetaData(),
            sa.Column('id', sa.Integer, primary_key=True),
            sa.Column('contract_id', sa.Integer),
            sa.Column('document_id', sa.Integer),
            sa.Column('created_at', sa.DateTime),
            sa.Column('updated_at', sa.DateTime),
        ),
        [
            {"id": 1, "contract_id": 1, "document_id": 1, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
        ]
    )

    op.bulk_insert(
        sa.Table(
            'service_order', sa.MetaData(),
            sa.Column('id', sa.Integer, primary_key=True),
            sa.Column('client_id', sa.Integer),
            sa.Column('service_type_id', sa.Integer),
            sa.Column('contract_id', sa.Integer),
            sa.Column('description', sa.String),
            sa.Column('start_date', sa.Date),
            sa.Column('end_date', sa.Date),
            sa.Column('status', sa.Enum(ServiceOrderStatusEnum)),
            sa.Column('total_value', sa.Float),
            sa.Column('created_at', sa.DateTime),
            sa.Column('updated_at', sa.DateTime),
        ),
        [
            {"id": 1, "client_id": 1, "service_type_id": 1, "contract_id": 1, "description": "Instalação de rede", "start_date": date(2023, 2, 1), "end_date": date(2023, 2, 5), "status": ServiceOrderStatusEnum.FINISHED, "total_value": 2500.00, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
        ]
    )

    op.bulk_insert(
        sa.Table(
            'service_order_item', sa.MetaData(),
            sa.Column('id', sa.Integer, primary_key=True),
            sa.Column('service_order_id', sa.Integer),
            sa.Column('description', sa.String),
            sa.Column('quantity', sa.Integer),
            sa.Column('unit_value', sa.Float),
            sa.Column('total_value', sa.Float),
            sa.Column('created_at', sa.DateTime),
            sa.Column('updated_at', sa.DateTime),
        ),
        [
            {"id": 1, "service_order_id": 1, "description": "Cabo de rede CAT6", "quantity": 100, "unit_value": 5.00, "total_value": 500.00, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": 2, "service_order_id": 1, "description": "Roteador Wireless", "quantity": 1, "unit_value": 300.00, "total_value": 300.00, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
        ]
    )

    op.bulk_insert(
        sa.Table(
            'service_order_document', sa.MetaData(),
            sa.Column('id', sa.Integer, primary_key=True),
            sa.Column('service_order_id', sa.Integer),
            sa.Column('document_id', sa.Integer),
            sa.Column('created_at', sa.DateTime),
            sa.Column('updated_at', sa.DateTime),
        ),
        [
            {"id": 1, "service_order_id": 1, "document_id": 2, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
        ]
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_service_order_item_id'), table_name='service_order_item')
    op.drop_table('service_order_item')
    op.drop_index(op.f('ix_service_order_document_id'), table_name='service_order_document')
    op.drop_table('service_order_document')
    op.drop_index(op.f('ix_service_order_id'), table_name='service_order')
    op.drop_table('service_order')
    op.drop_index(op.f('ix_contract_document_id'), table_name='contract_document')
    op.drop_table('contract_document')
    op.drop_index(op.f('ix_user_config_id'), table_name='user_config')
    op.drop_table('user_config')
    op.drop_index(op.f('ix_contract_number'), table_name='contract')
    op.drop_index(op.f('ix_contract_id'), table_name='contract')
    op.drop_table('contract')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_client_id'), table_name='client')
    op.drop_index(op.f('ix_client_email'), table_name='client')
    op.drop_index(op.f('ix_client_cnpj'), table_name='client')
    op.drop_table('client')
    op.drop_index(op.f('ix_service_type_id'), table_name='service_type')
    op.drop_table('service_type')
    op.drop_index(op.f('ix_person_id'), table_name='person')
    op.drop_index(op.f('ix_person_cpf'), table_name='person')
    op.drop_table('person')
    op.drop_index(op.f('ix_document_id'), table_name='document')
    op.drop_table('document')
    op.drop_index(op.f('ix_address_id'), table_name='address')
    op.drop_table('address')
    # ### end Alembic commands ###

    # Remove example data
    op.execute("DELETE FROM service_order_document WHERE id IN (1)")
    op.execute("DELETE FROM service_order_item WHERE id IN (1, 2)")
    op.execute("DELETE FROM service_order WHERE id IN (1)")
    op.execute("DELETE FROM contract_document WHERE id IN (1)")
    op.execute("DELETE FROM document WHERE id IN (1, 2)")
    op.execute("DELETE FROM contract WHERE id IN (1)")
    op.execute("DELETE FROM service_type WHERE id IN (1, 2)")
    op.execute("DELETE FROM client WHERE id IN (1)")
    op.execute("DELETE FROM address WHERE id IN (1, 2)")
    op.execute("DELETE FROM user_config WHERE id IN (1, 2)")
    op.execute("DELETE FROM \"user\" WHERE id IN (1, 2)") # \"user\" because user is a reserved keyword
    op.execute("DELETE FROM person WHERE id IN (1, 2, 3)")

